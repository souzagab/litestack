schema:
  1:
    create_table_data: >
      CREATE TABLE IF NOT EXISTS data(
        id TEXT PRIMARY KEY,
        value ANY,
        expires_in INTEGER,
        last_used INTEGER
      ) STRICT;
    create_expiry_index: >
      CREATE INDEX IF NOT EXISTS expiry_index ON data (expires_in);
    create_last_used_index: >
      CREATE INDEX IF NOT EXISTS last_used_index ON data (last_used);

stmts:
  pruner: >
    DELETE FROM data WHERE expires_in <= unixepoch('now');

  extra_pruner: >
    DELETE FROM data WHERE id IN (
      SELECT id
      FROM data
      ORDER BY last_used ASC
      LIMIT (
        SELECT CAST((count(*) * $1) AS int)
        FROM data
      )
    );

  limited_pruner: >
    DELETE FROM data
    WHERE id IN (
      SELECT id
      FROM data
      ORDER BY last_used ASC
      LIMIT $1
    );

  toucher: >
    UPDATE data
    SET last_used = unixepoch('now')
    WHERE id = $1;

  setter: >
    INSERT INTO data (id, value, expires_in, last_used)
    VALUES ($1, $2, unixepoch('now') + $3, unixepoch('now'))
    ON CONFLICT(id) DO UPDATE
    SET
      value = EXCLUDED.value,
      last_used = EXCLUDED.last_used,
      expires_in = EXCLUDED.expires_in;
  
  inserter: >
    INSERT INTO data (id, value, expires_in, last_used)
    VALUES ($1, $2, unixepoch('now') + $3, unixepoch('now'))
    ON CONFLICT(id) DO UPDATE
    SET
      value = EXCLUDED.value,
      last_used = EXCLUDED.last_used,
      expires_in = EXCLUDED.expires_in
    WHERE id = $1
      AND expires_in <= unixepoch('now');

  finder: >
    SELECT id FROM data WHERE id = $1;
  
  getter: >
    SELECT id, value, expires_in FROM data WHERE id = $1 AND expires_in >= unixepoch('now');
  
  deleter: >
    delete FROM data WHERE id = $1 RETURNING value;
  
  incrementer: >
    INSERT INTO data (id, value, expires_in, last_used)
    VALUES ($1, $2, unixepoch('now') + $3, unixepoch('now'))
    ON CONFLICT(id) DO UPDATE
    SET
      value = CAST(value AS int) + CAST(EXCLUDED.value AS int),
      last_used = EXCLUDED.last_used,
      expires_in = EXCLUDED.expires_in;
  
      
  
  counter: >
    SELECT count(*) FROM data;
  
  sizer: >
    SELECT size.page_size * count.page_count
    FROM pragma_page_size() AS size, pragma_page_count() AS count;
